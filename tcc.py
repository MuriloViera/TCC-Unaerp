# -*- coding: utf-8 -*-
"""TCC3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15DioaPZYO2YruhN_n2knga1b2Iivb20O
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import seaborn as sn
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sympy import *
import csv
import re
import math

#PASSAR POR CADA IMAGEM

diretorio = "/content/drive/Othercomputers/Meu computador/Data_set_Frutas_2/dados/"

arquivos = os.listdir(diretorio) #Gerar uma lista aleatoria
arquivos.sort() #Ordenar a lista

#Função de tratamento de imagem-----------------------------------------------------
def imagem(nome_imagem, diretorio):
  img = cv.imread('/content/drive/Othercomputers/Meu computador/Data_set_Frutas_2/dados/' + diretorio + '/' + nome_imagem)
  img = cv.cvtColor(img, cv.COLOR_BGR2RGB)

  #Tratamento das imagens
  kernel = np.ones((5,5),np.uint8)
  mask2 = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])

  img2 = cv.medianBlur(img, 9)
  img2 = cv.morphologyEx(img2,cv.MORPH_CLOSE, kernel, iterations=1)

  #Obteção das bordas e tratamento
  img7 = cv.Canny(img2, 50, 255)
  #kernel2 = np.ones((2,2),np.uint8)
  #img7 = cv.dilate(img7,kernel2,iterations=1) Para imagens mais detalhistas

  #Obtençao do contorno
  contornos, ordem = cv.findContours(img7, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
  contorno = contornos[0]

  #Obter maior contorno figura original
  for i in range(0, len(contornos)):
      if len(contorno) < len(contornos[i]):
       contorno = contornos[i]

  #Obtenção dos descritores

  #Calcular o perimetro
  perimetro = cv.arcLength(contorno, True)

  #Calcular o diametro
  diametro = np.sqrt(4*cv.contourArea(contorno)/np.pi)

  #Calcular a área
  area = cv.countNonZero(img7)

  #Compacidade -> O quão redondo é uma imagem
  compacidade = np.square(perimetro)/area

  #Excentricidade
  (x,y), (eixoMenor, eixoMaior), angulo = cv.fitEllipse(contorno)
  excentricidade2 = eixoMaior/eixoMenor
  excentricidade = round(eixoMaior/eixoMenor, 4)

  return(perimetro, area, compacidade, excentricidade, diametro)

#Fim da função---------------------------------------------------------------------------------------

#Começo do codigo------------------------------------------------------------------------------------
#Abrir o arquivo
with open('/content/drive/Othercomputers/Meu computador/Data_set_Frutas_2/finformation2.csv', 'w') as f:

  #Create the csv writer
  writer = csv.writer(f)
  writer2 = csv.DictWriter(f, fieldnames=['#','Classificacao','Perimetro', 'Area', 'Compacidade', 'Excentricidade', 'Diametro']) #Titulos

  #Escrever cabeçalho
  writer2.writeheader()
  #Estrutura de repitição
  for arquivo in arquivos:

    #Rodar as pastas com cada imagem
    if arquivo == 'apple':
      arquivos = os.listdir(diretorio + 'apple')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'apple')
        writer.writerow([arquivo] + ['Maca'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'banana':
      arquivos = os.listdir(diretorio + 'banana')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'banana')
        writer.writerow([arquivo] + ['Banana'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'kiwi':
      arquivos = os.listdir(diretorio + 'kiwi')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'kiwi')
        writer.writerow([arquivo] + ['Kiwi'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'lemon':
      arquivos = os.listdir(diretorio + 'lemon')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'lemon')
        writer.writerow([arquivo] + ['Limao'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'mango':
      arquivos = os.listdir(diretorio + 'mango')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'mango')
        writer.writerow([arquivo] + ['Manga'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'orange':
      arquivos = os.listdir(diretorio + 'orange')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'orange')
        writer.writerow([arquivo] + ['Laranja'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'papaya':
      arquivos = os.listdir(diretorio + 'papaya')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'papaya')
        writer.writerow([arquivo] + ['Mamao'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'pear':
      arquivos = os.listdir(diretorio + 'pear')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'pear')
        writer.writerow([arquivo] + ['Pera'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'pineapple':
      arquivos = os.listdir(diretorio + 'pineapple')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'pineapple')
        writer.writerow([arquivo] + ['Abacaxi'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'plum':
      arquivos = os.listdir(diretorio + 'plum')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'plum')
        writer.writerow([arquivo] + ['Ameixa'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'strawberry':
      arquivos = os.listdir(diretorio + 'strawberry')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'strawberry')
        writer.writerow([arquivo] + ['Morango'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

    if arquivo == 'tangerine':
      arquivos = os.listdir(diretorio + 'tangerine')
      arquivos.sort(key=lambda s: int(re.search(r'\d+', s).group()))
      for arquivo in arquivos:
        perimetro, area, compacidade, excentricidade, diametro = imagem(arquivo, 'tangerine')
        writer.writerow([arquivo] + ['Tangerina'] + [int(perimetro)] + [area] + [round(compacidade)] + [excentricidade] + [int(diametro)])

#Reconhecimento de padrões do arquivo CSV
dados = pd.read_csv('/content/drive/Othercomputers/Meu computador/Data_set_Frutas_2/finformation2.csv', sep=',')
dados.describe()

#Separar características de classes
X = dados.iloc[:,2:7] #Características, que são tudo que ta no eixo Y das posições 2,3,4,5 menos a 1 e 6
Y = dados.iloc[:, 1] #Classes, que são tudo que tao no eixo Y da posição 1 do eixo X da matriz mãe de dados (CSV)

#Normalização do conjunto de dados
normalizar = StandardScaler()
normalizar.fit(X)
X = normalizar.transform(X)

#Dividir o conjunto em treinamento (TRAIN) e teste (TEST)
XTrain, XTest, YTrain, YTest = train_test_split(X,Y,test_size=0.30,random_state=35)

#Classificador KNN
knn = KNeighborsClassifier(n_neighbors = 3)
knn.fit(XTrain, YTrain)
Y = knn.predict(XTest)

#Acurácia
acc = accuracy_score(YTest,Y)
print('Acurácia: {0:.2f}%\n'.format(acc*100))
print('Acurácia: {0:.4f}\n\n'.format(acc))

#Matriz de confusão
mc= pd.crosstab(YTest,Y,rownames=['True'],colnames=['Predição'],margins=True)
sn.set(rc = {'figure.figsize':(10,8)})
sn.heatmap(mc, annot=True, fmt='d', cmap='magma')
plt.title('Matriz de confusão')
plt.show()